name: Promote dev → stage (tests → PR → auto-merge)

on:
  push:
    branches:
      - dev

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests (CI)
        run: npm test -- --watchAll=false --ci

  create-and-merge-pr:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (same commit)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Create (or reuse) PR dev → stage and try to merge
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = "dev";
            const base = "stage";

            // find open PRs from dev -> stage
            const prs = await github.rest.pulls.list({
              owner, repo,
              head: `${owner}:${head}`,
              base,
              state: "open"
            });

            let pr;
            
            if (prs.data.length > 0) {
              pr = prs.data[0];
              core.info(`Using existing PR #${pr.number}`);
            } else {
              const newPr = await github.rest.pulls.create({
                owner, repo,
                head,
                base,
                title: `Automated: promote ${head} → ${base} (${process.env.GITHUB_SHA?.slice(0,7)})`,
                body: "Automated PR created by CI to promote changes from dev to stage."
              });
              pr = newPr.data;
              core.info(`Created PR #${pr.number}`);
            }

            // Attempt to merge (may fail if protections block it)
            try {
              const mergeResult = await github.rest.pulls.merge({
                owner, repo,
                pull_number: pr.number,
                merge_method: "merge"
              });
              core.info("Merge result: " + JSON.stringify(mergeResult.data));
            } catch (err) {
              core.warning("Auto-merge failed or blocked (e.g., branch protection). PR left open.");
              core.warning(err.message);
            }
